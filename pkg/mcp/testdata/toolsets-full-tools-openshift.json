[
  {
    "annotations": {
      "title": "Configuration: View",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Get the current Kubernetes configuration content as a kubeconfig YAML",
    "inputSchema": {
      "type": "object",
      "properties": {
        "minified": {
          "description": "Return a minified version of the configuration. If set to true, keeps only the current-context and the relevant pieces of the configuration for that context. If set to false, all contexts, clusters, auth-infos, and users are returned in the configuration. (Optional, default true)",
          "type": "boolean"
        }
      }
    },
    "name": "configuration_view"
  },
  {
    "annotations": {
      "title": "Events: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the Kubernetes events in the current cluster from all namespaces",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Optional Namespace to retrieve the events from. If not provided, will list events from all namespaces",
          "type": "string"
        }
      }
    },
    "name": "events_list"
  },
  {
    "annotations": {
      "title": "Graph: Mesh status",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Check the status of my mesh by querying Kiali graph",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Optional single namespace to include in the graph (alternative to namespaces)",
          "type": "string"
        },
        "namespaces": {
          "description": "Optional comma-separated list of namespaces to include in the graph",
          "type": "string"
        }
      }
    },
    "name": "graph"
  },
  {
    "annotations": {
      "title": "Health",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get health status for apps, workloads, and services across specified namespaces in the mesh. Returns health information including error rates and status for the requested resource type",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Comma-separated list of namespaces to get health from (e.g. 'bookinfo' or 'bookinfo,default'). If not provided, returns health for all accessible namespaces",
          "type": "string"
        },
        "type": {
          "description": "Type of health to retrieve: 'app', 'service', or 'workload'. Default: 'app'",
          "type": "string"
        },
        "rateInterval": {
          "description": "Rate interval for fetching error rate (e.g., '10m', '5m', '1h'). Default: '10m'",
          "type": "string"
        },
        "queryTime": {
          "description": "Unix timestamp (in seconds) for the prometheus query. If not provided, uses current time. Optional",
          "type": "string"
        }
      }
    },
    "name": "health"
  },
  {
    "annotations": {
      "title": "Helm: Install",
      "readOnlyHint": false,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Install a Helm chart in the current or provided namespace",
    "inputSchema": {
      "type": "object",
      "properties": {
        "chart": {
          "description": "Chart reference to install (for example: stable/grafana, oci://ghcr.io/nginxinc/charts/nginx-ingress)",
          "type": "string"
        },
        "name": {
          "description": "Name of the Helm release (Optional, random name if not provided)",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to install the Helm chart in (Optional, current namespace if not provided)",
          "type": "string"
        },
        "values": {
          "description": "Values to pass to the Helm chart (Optional)",
          "type": "object"
        }
      },
      "required": [
        "chart"
      ]
    },
    "name": "helm_install"
  },
  {
    "annotations": {
      "title": "Helm: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the Helm releases in the current or provided namespace (or in all namespaces if specified)",
    "inputSchema": {
      "type": "object",
      "properties": {
        "all_namespaces": {
          "description": "If true, lists all Helm releases in all namespaces ignoring the namespace argument (Optional)",
          "type": "boolean"
        },
        "namespace": {
          "description": "Namespace to list Helm releases from (Optional, all namespaces if not provided)",
          "type": "string"
        }
      }
    },
    "name": "helm_list"
  },
  {
    "annotations": {
      "title": "Helm: Uninstall",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Uninstall a Helm release in the current or provided namespace",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Helm release to uninstall",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to uninstall the Helm release from (Optional, current namespace if not provided)",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "name": "helm_uninstall"
  },
  {
    "annotations": {
      "title": "Istio Config: List All",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all Istio configuration objects in the mesh including their full YAML resources and details",
    "inputSchema": {
      "type": "object"
    },
    "name": "istio_config"
  },
  {
    "annotations": {
      "title": "Istio Object: Create",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": false
    },
    "description": "Create a new Istio object using POST method. The JSON data will be used to create the new object.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace where the Istio object will be created",
          "type": "string"
        },
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "json_data": {
          "description": "JSON data for the new object",
          "type": "string"
        }
      },
      "required": ["namespace", "group", "version", "kind", "json_data"]
    },
    "name": "istio_object_create"
  },
  {
    "annotations": {
      "title": "Istio Object: Delete",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": true,
      "openWorldHint": false
    },
    "description": "Delete an existing Istio object using DELETE method.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the Istio object",
          "type": "string"
        },
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "name": {
          "description": "Name of the Istio object",
          "type": "string"
        }
      },
      "required": ["namespace", "group", "version", "kind", "name"]
    },
    "name": "istio_object_delete"
  },
  {
    "annotations": {
      "title": "Istio Object: Details",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get detailed information about a specific Istio object including validation and help information",
    "inputSchema": {
      "type": "object",
      "properties": {
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "name": {
          "description": "Name of the Istio object",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the Istio object",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "group",
        "version",
        "kind",
        "name"
      ]
    },
    "name": "istio_object_details"
  },
  {
    "annotations": {
      "title": "Istio Object: Patch",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": false
    },
    "description": "Modify an existing Istio object using PATCH method. The JSON patch data will be applied to the existing object.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the Istio object",
          "type": "string"
        },
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "name": {
          "description": "Name of the Istio object",
          "type": "string"
        },
        "json_patch": {
          "description": "JSON patch data to apply to the object",
          "type": "string"
        }
      },
      "required": ["namespace", "group", "version", "kind", "name", "json_patch"]
    },
    "name": "istio_object_patch"
  },
  {
    "annotations": {
      "title": "Mesh Status: Components Overview",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get the status of mesh components including Istio, Kiali, Grafana, Prometheus and their interactions, versions, and health status",
    "inputSchema": {
      "type": "object"
    },
    "name": "mesh_status"
  },
  {
    "annotations": {
      "title": "Namespaces: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all namespaces in the mesh that the user has access to",
    "inputSchema": {
      "type": "object"
    },
    "name": "namespaces"
  },
  {
    "annotations": {
      "title": "Namespaces: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the Kubernetes namespaces in the current cluster",
    "inputSchema": {
      "type": "object"
    },
    "name": "namespaces_list"
  },
  {
    "annotations": {
      "title": "Pods: Delete",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Delete a Kubernetes Pod in the current or provided namespace with the provided name",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Pod to delete",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to delete the Pod from",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "name": "pods_delete"
  },
  {
    "annotations": {
      "title": "Pods: Exec",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Execute a command in a Kubernetes Pod in the current or provided namespace with the provided name and command",
    "inputSchema": {
      "type": "object",
      "properties": {
        "command": {
          "description": "Command to execute in the Pod container. The first item is the command to be run, and the rest are the arguments to that command. Example: [\"ls\", \"-l\", \"/tmp\"]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "container": {
          "description": "Name of the Pod container where the command will be executed (Optional)",
          "type": "string"
        },
        "name": {
          "description": "Name of the Pod where the command will be executed",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the Pod where the command will be executed",
          "type": "string"
        }
      },
      "required": [
        "name",
        "command"
      ]
    },
    "name": "pods_exec"
  },
  {
    "annotations": {
      "title": "Pods: Get",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Get a Kubernetes Pod in the current or provided namespace with the provided name",
    "inputSchema": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Pod",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to get the Pod from",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "name": "pods_get"
  },
  {
    "annotations": {
      "title": "Pods: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the Kubernetes pods in the current cluster from all namespaces",
    "inputSchema": {
      "type": "object",
      "properties": {
        "labelSelector": {
          "description": "Optional Kubernetes label selector (e.g. 'app=myapp,env=prod' or 'app in (myapp,yourapp)'), use this option when you want to filter the pods by label",
          "pattern": "([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]",
          "type": "string"
        }
      }
    },
    "name": "pods_list"
  },
  {
    "annotations": {
      "title": "Pods: List in Namespace",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the Kubernetes pods in the specified namespace in the current cluster",
    "inputSchema": {
      "type": "object",
      "properties": {
        "labelSelector": {
          "description": "Optional Kubernetes label selector (e.g. 'app=myapp,env=prod' or 'app in (myapp,yourapp)'), use this option when you want to filter the pods by label",
          "pattern": "([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to list pods from",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ]
    },
    "name": "pods_list_in_namespace"
  },
  {
    "annotations": {
      "title": "Pods: Log",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Get the logs of a Kubernetes Pod in the current or provided namespace with the provided name",
    "inputSchema": {
      "type": "object",
      "properties": {
        "container": {
          "description": "Name of the Pod container to get the logs from (Optional)",
          "type": "string"
        },
        "name": {
          "description": "Name of the Pod to get the logs from",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to get the Pod logs from",
          "type": "string"
        },
        "previous": {
          "description": "Return previous terminated container logs (Optional)",
          "type": "boolean"
        },
        "tail": {
          "default": 100,
          "description": "Number of lines to retrieve from the end of the logs (Optional, default: 100)",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "name"
      ]
    },
    "name": "pods_log"
  },
  {
    "annotations": {
      "title": "Pods: Run",
      "readOnlyHint": false,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Run a Kubernetes Pod in the current or provided namespace with the provided container image and optional name",
    "inputSchema": {
      "type": "object",
      "properties": {
        "image": {
          "description": "Container Image to run in the Pod",
          "type": "string"
        },
        "name": {
          "description": "Name of the Pod (Optional, random name if not provided)",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to run the Pod in",
          "type": "string"
        },
        "port": {
          "description": "TCP/IP port to expose from the Pod container (Optional, no port exposed if not provided)",
          "type": "number"
        }
      },
      "required": [
        "image"
      ]
    },
    "name": "pods_run"
  },
  {
    "annotations": {
      "title": "Pods: Top",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "List the resource consumption (CPU and memory) as recorded by the Kubernetes Metrics Server for the specified Kubernetes Pods in the all namespaces, the provided namespace, or the current namespace",
    "inputSchema": {
      "type": "object",
      "properties": {
        "all_namespaces": {
          "default": true,
          "description": "If true, list the resource consumption for all Pods in all namespaces. If false, list the resource consumption for Pods in the provided namespace or the current namespace",
          "type": "boolean"
        },
        "label_selector": {
          "description": "Kubernetes label selector (e.g. 'app=myapp,env=prod' or 'app in (myapp,yourapp)'), use this option when you want to filter the pods by label (Optional, only applicable when name is not provided)",
          "pattern": "([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]",
          "type": "string"
        },
        "name": {
          "description": "Name of the Pod to get the resource consumption from (Optional, all Pods in the namespace if not provided)",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace to get the Pods resource consumption from (Optional, current namespace if not provided and all_namespaces is false)",
          "type": "string"
        }
      }
    },
    "name": "pods_top"
  },
  {
    "annotations": {
      "title": "Projects: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the OpenShift projects in the current cluster",
    "inputSchema": {
      "type": "object"
    },
    "name": "projects_list"
  },
  {
    "annotations": {
      "title": "Resources: Create or Update",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Create or update a Kubernetes resource in the current cluster by providing a YAML or JSON representation of the resource\n(common apiVersion and kind include: v1 Pod, v1 Service, v1 Node, apps/v1 Deployment, networking.k8s.io/v1 Ingress, route.openshift.io/v1 Route)",
    "inputSchema": {
      "type": "object",
      "properties": {
        "resource": {
          "description": "A JSON or YAML containing a representation of the Kubernetes resource. Should include top-level fields such as apiVersion,kind,metadata, and spec",
          "type": "string"
        }
      },
      "required": [
        "resource"
      ]
    },
    "name": "resources_create_or_update"
  },
  {
    "annotations": {
      "title": "Resources: Delete",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Delete a Kubernetes resource in the current cluster by providing its apiVersion, kind, optionally the namespace, and its name\n(common apiVersion and kind include: v1 Pod, v1 Service, v1 Node, apps/v1 Deployment, networking.k8s.io/v1 Ingress, route.openshift.io/v1 Route)",
    "inputSchema": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "apiVersion of the resource (examples of valid apiVersion are: v1, apps/v1, networking.k8s.io/v1)",
          "type": "string"
        },
        "kind": {
          "description": "kind of the resource (examples of valid kind are: Pod, Service, Deployment, Ingress)",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource",
          "type": "string"
        },
        "namespace": {
          "description": "Optional Namespace to delete the namespaced resource from (ignored in case of cluster scoped resources). If not provided, will delete resource from configured namespace",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name"
      ]
    },
    "name": "resources_delete"
  },
  {
    "annotations": {
      "title": "Resources: Get",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Get a Kubernetes resource in the current cluster by providing its apiVersion, kind, optionally the namespace, and its name\n(common apiVersion and kind include: v1 Pod, v1 Service, v1 Node, apps/v1 Deployment, networking.k8s.io/v1 Ingress, route.openshift.io/v1 Route)",
    "inputSchema": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "apiVersion of the resource (examples of valid apiVersion are: v1, apps/v1, networking.k8s.io/v1)",
          "type": "string"
        },
        "kind": {
          "description": "kind of the resource (examples of valid kind are: Pod, Service, Deployment, Ingress)",
          "type": "string"
        },
        "name": {
          "description": "Name of the resource",
          "type": "string"
        },
        "namespace": {
          "description": "Optional Namespace to retrieve the namespaced resource from (ignored in case of cluster scoped resources). If not provided, will get resource from configured namespace",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name"
      ]
    },
    "name": "resources_get"
  },
  {
    "annotations": {
      "title": "Resources: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List Kubernetes resources and objects in the current cluster by providing their apiVersion and kind and optionally the namespace and label selector\n(common apiVersion and kind include: v1 Pod, v1 Service, v1 Node, apps/v1 Deployment, networking.k8s.io/v1 Ingress, route.openshift.io/v1 Route)",
    "inputSchema": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "apiVersion of the resources (examples of valid apiVersion are: v1, apps/v1, networking.k8s.io/v1)",
          "type": "string"
        },
        "kind": {
          "description": "kind of the resources (examples of valid kind are: Pod, Service, Deployment, Ingress)",
          "type": "string"
        },
        "labelSelector": {
          "description": "Optional Kubernetes label selector (e.g. 'app=myapp,env=prod' or 'app in (myapp,yourapp)'), use this option when you want to filter the pods by label",
          "pattern": "([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]",
          "type": "string"
        },
        "namespace": {
          "description": "Optional Namespace to retrieve the namespaced resources from (ignored in case of cluster scoped resources). If not provided, will list resources from all namespaces",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ]
    },
    "name": "resources_list"
  },
  {
    "annotations": {
      "title": "Service: Details",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get detailed information for a specific service in a namespace, including validation, health status, and configuration",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the service",
          "type": "string"
        },
        "service": {
          "description": "Name of the service to get details for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "service"
      ]
    },
    "name": "service_details"
  },
  {
    "annotations": {
      "title": "Service: Metrics",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get metrics for a specific service in a namespace. Supports filtering by time range, direction (inbound/outbound), reporter, and other query parameters",
    "inputSchema": {
      "type": "object",
      "properties": {
        "byLabels": {
          "description": "Comma-separated list of labels to group metrics by (e.g., 'source_workload,destination_service'). Optional",
          "type": "string"
        },
        "direction": {
          "description": "Traffic direction: 'inbound' or 'outbound'. Optional, defaults to 'outbound'",
          "type": "string"
        },
        "duration": {
          "description": "Duration of the query period in seconds (e.g., '1800' for 30 minutes). Optional, defaults to 1800 seconds",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the service",
          "type": "string"
        },
        "quantiles": {
          "description": "Comma-separated list of quantiles for histogram metrics (e.g., '0.5,0.95,0.99'). Optional",
          "type": "string"
        },
        "rateInterval": {
          "description": "Rate interval for metrics (e.g., '1m', '5m'). Optional, defaults to '1m'",
          "type": "string"
        },
        "reporter": {
          "description": "Metrics reporter: 'source', 'destination', or 'both'. Optional, defaults to 'source'",
          "type": "string"
        },
        "requestProtocol": {
          "description": "Filter by request protocol (e.g., 'http', 'grpc', 'tcp'). Optional",
          "type": "string"
        },
        "service": {
          "description": "Name of the service to get metrics for",
          "type": "string"
        },
        "step": {
          "description": "Step between data points in seconds (e.g., '15'). Optional, defaults to 15 seconds",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "service"
      ]
    },
    "name": "service_metrics"
  },
  {
    "annotations": {
      "title": "Services: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all services in the mesh across specified namespaces with health and Istio resource information",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Comma-separated list of namespaces to get services from (e.g. 'bookinfo' or 'bookinfo,default'). If not provided, will list services from all accessible namespaces",
          "type": "string"
        }
      }
    },
    "name": "services_list"
  },
  {
    "annotations": {
      "title": "Validations: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the validations in the current cluster from all namespaces",
    "inputSchema": {
      "type": "object",
      "properties": {        
        "namespace": {
          "description": "Optional single namespace to retrieve validations from (alternative to namespaces)",
          "type": "string"
        },
        "namespaces": {
          "description": "Optional comma-separated list of namespaces to retrieve validations from",
          "type": "string"
        }
      }
    },
    "name": "validations_list"
  },
  {
    "annotations": {
      "title": "Workload: Details",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get detailed information for a specific workload in a namespace, including validation, health status, and configuration",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the workload",
          "type": "string"
        },
        "workload": {
          "description": "Name of the workload to get details for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "workload"
      ]
    },
    "name": "workload_details"
  },
  {
    "annotations": {
      "title": "Workload: Logs",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Get logs for a specific workload's pods in a namespace. Retrieves logs from all containers of the workload's pods, with optional filtering by container name and time range",
    "inputSchema": {
      "type": "object",
      "properties": {
        "container": {
          "description": "Optional container name to filter logs. If not provided, logs from all containers are returned",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the workload",
          "type": "string"
        },
        "previous": {
          "description": "Whether to include logs from previous terminated containers (default: false)",
          "type": "boolean"
        },
        "since": {
          "description": "Time duration to fetch logs from (e.g., '5m', '1h', '30s'). If not provided, returns recent logs",
          "type": "string"
        },
        "tail": {
          "description": "Number of lines to retrieve from the end of logs (default: 100)",
          "minimum": 1,
          "type": "integer"
        },
        "workload": {
          "description": "Name of the workload to get logs for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "workload"
      ]
    },
    "name": "workload_logs"
  },
  {
    "annotations": {
      "title": "Workload: Metrics",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get metrics for a specific workload in a namespace. Supports filtering by time range, direction (inbound/outbound), reporter, and other query parameters",
    "inputSchema": {
      "type": "object",
      "properties": {
        "byLabels": {
          "description": "Comma-separated list of labels to group metrics by (e.g., 'source_workload,destination_service'). Optional",
          "type": "string"
        },
        "direction": {
          "description": "Traffic direction: 'inbound' or 'outbound'. Optional, defaults to 'outbound'",
          "type": "string"
        },
        "duration": {
          "description": "Duration of the query period in seconds (e.g., '1800' for 30 minutes). Optional, defaults to 1800 seconds",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the workload",
          "type": "string"
        },
        "quantiles": {
          "description": "Comma-separated list of quantiles for histogram metrics (e.g., '0.5,0.95,0.99'). Optional",
          "type": "string"
        },
        "rateInterval": {
          "description": "Rate interval for metrics (e.g., '1m', '5m'). Optional, defaults to '1m'",
          "type": "string"
        },
        "reporter": {
          "description": "Metrics reporter: 'source', 'destination', or 'both'. Optional, defaults to 'source'",
          "type": "string"
        },
        "requestProtocol": {
          "description": "Filter by request protocol (e.g., 'http', 'grpc', 'tcp'). Optional",
          "type": "string"
        },
        "step": {
          "description": "Step between data points in seconds (e.g., '15'). Optional, defaults to 15 seconds",
          "type": "string"
        },
        "workload": {
          "description": "Name of the workload to get metrics for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "workload"
      ]
    },
    "name": "workload_metrics"
  },
  {
    "annotations": {
      "title": "Workloads: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all workloads in the mesh across specified namespaces with health and Istio resource information",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Comma-separated list of namespaces to get workloads from (e.g. 'bookinfo' or 'bookinfo,default'). If not provided, will list workloads from all accessible namespaces",
          "type": "string"
        }
      }
    },
    "name": "workloads_list"
  }
]
