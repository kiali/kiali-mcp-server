[
  {
    "annotations": {
      "title": "Graph: Mesh status",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Check the status of my mesh by querying Kiali graph",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Optional single namespace to include in the graph (alternative to namespaces)",
          "type": "string"
        },
        "namespaces": {
          "description": "Optional comma-separated list of namespaces to include in the graph",
          "type": "string"
        }
      }
    },
    "name": "graph"
  },
  {
    "annotations": {
      "title": "Health",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get health status for apps, workloads, and services across specified namespaces in the mesh. Returns health information including error rates and status for the requested resource type",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Comma-separated list of namespaces to get health from (e.g. 'bookinfo' or 'bookinfo,default'). If not provided, returns health for all accessible namespaces",
          "type": "string"
        },
        "type": {
          "description": "Type of health to retrieve: 'app', 'service', or 'workload'. Default: 'app'",
          "type": "string"
        },
        "rateInterval": {
          "description": "Rate interval for fetching error rate (e.g., '10m', '5m', '1h'). Default: '10m'",
          "type": "string"
        },
        "queryTime": {
          "description": "Unix timestamp (in seconds) for the prometheus query. If not provided, uses current time. Optional",
          "type": "string"
        }
      }
    },
    "name": "health"
  },
  {
    "annotations": {
      "title": "Istio Config: List All",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all Istio configuration objects in the mesh including their full YAML resources and details",
    "inputSchema": {
      "type": "object"
    },
    "name": "istio_config"
  },
  {
    "annotations": {
      "title": "Istio Object: Create",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": false
    },
    "description": "Create a new Istio object using POST method. The JSON data will be used to create the new object.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace where the Istio object will be created",
          "type": "string"
        },
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "json_data": {
          "description": "JSON data for the new object",
          "type": "string"
        }
      },
      "required": ["namespace", "group", "version", "kind", "json_data"]
    },
    "name": "istio_object_create"
  },
  {
    "annotations": {
      "title": "Istio Object: Delete",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": true,
      "openWorldHint": false
    },
    "description": "Delete an existing Istio object using DELETE method.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the Istio object",
          "type": "string"
        },
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "name": {
          "description": "Name of the Istio object",
          "type": "string"
        }
      },
      "required": ["namespace", "group", "version", "kind", "name"]
    },
    "name": "istio_object_delete"
  },
  {
    "annotations": {
      "title": "Istio Object: Details",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get detailed information about a specific Istio object including validation and help information",
    "inputSchema": {
      "type": "object",
      "properties": {
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "name": {
          "description": "Name of the Istio object",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the Istio object",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "group",
        "version",
        "kind",
        "name"
      ]
    },
    "name": "istio_object_details"
  },
  {
    "annotations": {
      "title": "Istio Object: Patch",
      "readOnlyHint": false,
      "destructiveHint": true,
      "idempotentHint": false,
      "openWorldHint": false
    },
    "description": "Modify an existing Istio object using PATCH method. The JSON patch data will be applied to the existing object.",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the Istio object",
          "type": "string"
        },
        "group": {
          "description": "API group of the Istio object (e.g., 'networking.istio.io', 'gateway.networking.k8s.io')",
          "type": "string"
        },
        "version": {
          "description": "API version of the Istio object (e.g., 'v1', 'v1beta1')",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the Istio object (e.g., 'DestinationRule', 'VirtualService', 'HTTPRoute', 'Gateway')",
          "type": "string"
        },
        "name": {
          "description": "Name of the Istio object",
          "type": "string"
        },
        "json_patch": {
          "description": "JSON patch data to apply to the object",
          "type": "string"
        }
      },
      "required": ["namespace", "group", "version", "kind", "name", "json_patch"]
    },
    "name": "istio_object_patch"
  },
  {
    "annotations": {
      "title": "Mesh Status: Components Overview",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get the status of mesh components including Istio, Kiali, Grafana, Prometheus and their interactions, versions, and health status",
    "inputSchema": {
      "type": "object"
    },
    "name": "mesh_status"
  },
  {
    "annotations": {
      "title": "Namespaces: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all namespaces in the mesh that the user has access to",
    "inputSchema": {
      "type": "object"
    },
    "name": "namespaces"
  },
  {
    "annotations": {
      "title": "Service: Details",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get detailed information for a specific service in a namespace, including validation, health status, and configuration",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the service",
          "type": "string"
        },
        "service": {
          "description": "Name of the service to get details for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "service"
      ]
    },
    "name": "service_details"
  },
  {
    "annotations": {
      "title": "Service: Metrics",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get metrics for a specific service in a namespace. Supports filtering by time range, direction (inbound/outbound), reporter, and other query parameters",
    "inputSchema": {
      "type": "object",
      "properties": {
        "byLabels": {
          "description": "Comma-separated list of labels to group metrics by (e.g., 'source_workload,destination_service'). Optional",
          "type": "string"
        },
        "direction": {
          "description": "Traffic direction: 'inbound' or 'outbound'. Optional, defaults to 'outbound'",
          "type": "string"
        },
        "duration": {
          "description": "Duration of the query period in seconds (e.g., '1800' for 30 minutes). Optional, defaults to 1800 seconds",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the service",
          "type": "string"
        },
        "quantiles": {
          "description": "Comma-separated list of quantiles for histogram metrics (e.g., '0.5,0.95,0.99'). Optional",
          "type": "string"
        },
        "rateInterval": {
          "description": "Rate interval for metrics (e.g., '1m', '5m'). Optional, defaults to '1m'",
          "type": "string"
        },
        "reporter": {
          "description": "Metrics reporter: 'source', 'destination', or 'both'. Optional, defaults to 'source'",
          "type": "string"
        },
        "requestProtocol": {
          "description": "Filter by request protocol (e.g., 'http', 'grpc', 'tcp'). Optional",
          "type": "string"
        },
        "service": {
          "description": "Name of the service to get metrics for",
          "type": "string"
        },
        "step": {
          "description": "Step between data points in seconds (e.g., '15'). Optional, defaults to 15 seconds",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "service"
      ]
    },
    "name": "service_metrics"
  },
  {
    "annotations": {
      "title": "Services: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all services in the mesh across specified namespaces with health and Istio resource information",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Comma-separated list of namespaces to get services from (e.g. 'bookinfo' or 'bookinfo,default'). If not provided, will list services from all accessible namespaces",
          "type": "string"
        }
      }
    },
    "name": "services_list"
  },
  {
    "annotations": {
      "title": "Validations: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "List all the validations in the current cluster from all namespaces",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Optional single namespace to retrieve validations from (alternative to namespaces)",
          "type": "string"
        },
        "namespaces": {
          "description": "Optional comma-separated list of namespaces to retrieve validations from",
          "type": "string"
        }
      }
    },
    "name": "validations_list"
  },
  {
    "annotations": {
      "title": "Workload: Details",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get detailed information for a specific workload in a namespace, including validation, health status, and configuration",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespace": {
          "description": "Namespace containing the workload",
          "type": "string"
        },
        "workload": {
          "description": "Name of the workload to get details for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "workload"
      ]
    },
    "name": "workload_details"
  },
  {
    "annotations": {
      "title": "Workload: Logs",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": false,
      "openWorldHint": true
    },
    "description": "Get logs for a specific workload's pods in a namespace. Retrieves logs from all containers of the workload's pods, with optional filtering by container name and time range",
    "inputSchema": {
      "type": "object",
      "properties": {
        "container": {
          "description": "Optional container name to filter logs. If not provided, logs from all containers are returned",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the workload",
          "type": "string"
        },
        "previous": {
          "description": "Whether to include logs from previous terminated containers (default: false)",
          "type": "boolean"
        },
        "since": {
          "description": "Time duration to fetch logs from (e.g., '5m', '1h', '30s'). If not provided, returns recent logs",
          "type": "string"
        },
        "tail": {
          "description": "Number of lines to retrieve from the end of logs (default: 100)",
          "minimum": 1,
          "type": "integer"
        },
        "workload": {
          "description": "Name of the workload to get logs for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "workload"
      ]
    },
    "name": "workload_logs"
  },
  {
    "annotations": {
      "title": "Workload: Metrics",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get metrics for a specific workload in a namespace. Supports filtering by time range, direction (inbound/outbound), reporter, and other query parameters",
    "inputSchema": {
      "type": "object",
      "properties": {
        "byLabels": {
          "description": "Comma-separated list of labels to group metrics by (e.g., 'source_workload,destination_service'). Optional",
          "type": "string"
        },
        "direction": {
          "description": "Traffic direction: 'inbound' or 'outbound'. Optional, defaults to 'outbound'",
          "type": "string"
        },
        "duration": {
          "description": "Duration of the query period in seconds (e.g., '1800' for 30 minutes). Optional, defaults to 1800 seconds",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace containing the workload",
          "type": "string"
        },
        "quantiles": {
          "description": "Comma-separated list of quantiles for histogram metrics (e.g., '0.5,0.95,0.99'). Optional",
          "type": "string"
        },
        "rateInterval": {
          "description": "Rate interval for metrics (e.g., '1m', '5m'). Optional, defaults to '1m'",
          "type": "string"
        },
        "reporter": {
          "description": "Metrics reporter: 'source', 'destination', or 'both'. Optional, defaults to 'source'",
          "type": "string"
        },
        "requestProtocol": {
          "description": "Filter by request protocol (e.g., 'http', 'grpc', 'tcp'). Optional",
          "type": "string"
        },
        "step": {
          "description": "Step between data points in seconds (e.g., '15'). Optional, defaults to 15 seconds",
          "type": "string"
        },
        "workload": {
          "description": "Name of the workload to get metrics for",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "workload"
      ]
    },
    "name": "workload_metrics"
  },
  {
    "annotations": {
      "title": "Workloads: List",
      "readOnlyHint": true,
      "destructiveHint": false,
      "idempotentHint": true,
      "openWorldHint": true
    },
    "description": "Get all workloads in the mesh across specified namespaces with health and Istio resource information",
    "inputSchema": {
      "type": "object",
      "properties": {
        "namespaces": {
          "description": "Comma-separated list of namespaces to get workloads from (e.g. 'bookinfo' or 'bookinfo,default'). If not provided, will list workloads from all accessible namespaces",
          "type": "string"
        }
      }
    },
    "name": "workloads_list"
  }
]

